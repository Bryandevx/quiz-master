generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid())
  email     String   @unique
  firstName String   @map("first_name")
  lastName  String   @map("last_name")
  username  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  password  String
  type      Role     @default(USER)
  status    Status   @default(ACTIVE)

  programs     UserProgram[]
  testAttempts UserTest[]

  @@map("users")
}

model Program {
  id          Int      @id @default(autoincrement())
  uuid        String   @unique @default(uuid())
  name        String
  description String
  imageUrl    String   @map("image_url")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  status      Status   @default(ACTIVE)

  users UserProgram[]
  tests ProgramTest[]

  @@map("programs")
}

model Test {
  id          Int      @id @default(autoincrement())
  uuid        String   @unique @default(uuid())
  name        String
  description String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  status      Status   @default(ACTIVE)
  level       Level    @default(BEGINNER)

  programs     ProgramTest[]
  questions    TestQuestion[]
  userAttempts UserTest[]

  @@map("tests")
}

model Answer {
  id                     Int              @id @default(autoincrement())
  uuid                   String           @unique @default(uuid())
  text                   String
  optionAnswerQuestions  QuestionAnswer[]
  correctAnswerQuestions Question[]

  @@map("answers")
}

model Question {
  id              Int              @id @default(autoincrement())
  uuid            String           @unique @default(uuid())
  text            String
  correctAnswer   Answer           @relation(fields: [correctAnswerId], references: [id])
  correctAnswerId Int              @map("correct_answer_id")
  tests           TestQuestion[]
  answers         QuestionAnswer[]

  @@map("questions")
}

model UserProgram {
  userId    Int     @map("user_id")
  programId Int     @map("program_id")
  user      User    @relation(fields: [userId], references: [id])
  program   Program @relation(fields: [programId], references: [id])

  @@id([userId, programId])
  @@map("user_programs")
}

model ProgramTest {
  programId Int     @map("program_id")
  testId    Int     @map("test_id")
  test      Test    @relation(fields: [testId], references: [id])
  program   Program @relation(fields: [programId], references: [id])

  @@id([programId, testId])
  @@map("program_tests")
}

model TestQuestion {
  testId     Int      @map("test_id")
  questionId Int      @map("question_id")
  test       Test     @relation(fields: [testId], references: [id])
  question   Question @relation(fields: [questionId], references: [id])

  @@id([testId, questionId])
  @@map("test_questions")
}

model QuestionAnswer {
  id          Int                      @id @default(autoincrement())
  uuid        String                   @unique @default(uuid())
  questionId  Int                      @map("question_id")
  answerId    Int                      @map("answer_id")
  question    Question                 @relation(fields: [questionId], references: [id])
  answer      Answer                   @relation(fields: [answerId], references: [id])
  userAttempt UserTestQuestionAnswer[]

  @@map("question_answers")
}

model UserTestQuestionAnswer {
  questionAnswerId Int @map("question_answer_id")
  userTestId       Int @map("user_test_id")

  questionAnswer QuestionAnswer @relation(fields: [questionAnswerId], references: [id])
  userTest       UserTest       @relation(fields: [userTestId], references: [id])

  @@id([questionAnswerId, userTestId])
  @@map("user_test_question_answers")
}

model UserTest {
  id              Int                      @id @default(autoincrement())
  uuid            String                   @unique @default(uuid())
  userId          Int                      @map("user_id")
  testId          Int                      @map("test_id")
  test            Test                     @relation(fields: [testId], references: [id])
  user            User                     @relation(fields: [userId], references: [id])
  questionAnswers UserTestQuestionAnswer[]
}

enum Role {
  USER
  ADMIN
}

enum Status {
  ACTIVE
  DELETED
}

enum Level {
  BEGINNER
  MEDIUM
  ADVANCED
}
