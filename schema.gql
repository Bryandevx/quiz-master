# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  id: Float
  uuid: String
  email: String
  type: Role
  name: String
  firstName: String
  lastName: String
  username: String
  createdAt: DateTime
  updatedAt: DateTime
}

enum Role {
  USER
  ADMIN
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Test {
  id: Float
  uuid: String
  name: String
  status: Status
  level: Level
  description: String
  createdAt: DateTime
  updatedAt: DateTime
}

enum Status {
  ACTIVE
  DELETED
}

enum Level {
  BEGINNER
  MEDIUM
  ADVANCED
}

type Question {
  id: Float
  uuid: String
  text: String
}

type Answer {
  id: Float
  uuid: String
  text: String
}

type LoginOutput {
  access_token: String!
  expiresAt: DateTime!
  user: User!
}

type Query {
  user(where: UserWhereUniqueInput!): User
  tests(skip: Int, take: Int, cursor: TestWhereUniqueInput, orderBy: TestOrderByInput, where: TestWhereInput, search: SearchInput): [Test!]!
  question(where: QuestionWhereUniqueInput!): Question
}

input UserWhereUniqueInput {
  uuid: String
  username: String
  email: String
}

input TestWhereUniqueInput {
  id: Float
  uuid: String
  name: String
}

input TestOrderByInput {
  id: OrderByArg
  uuid: OrderByArg
  name: OrderByArg
  description: OrderByArg
  createdAt: OrderByArg
  updatedAt: OrderByArg
}

enum OrderByArg {
  ASC
  DESC
}

input TestWhereInput {
  id: Int
  uuid: String
  name: String
  description: String
  createdAt: DateTime
  updatedAt: DateTime
}

input SearchInput {
  value: String!
}

input QuestionWhereUniqueInput {
  id: Float
  text: String
}

type Mutation {
  login(data: LoginUserInput!): LoginOutput!
  signup(data: SignUpInput!): User!
  createUser(data: UserCreateInput!): User!
  createTest(data: TestCreateInput!): Test!
  createQuestion(data: QuestionCreateInput!): Question!
  createAnswer(data: AnswerCreateInput!): Answer!
}

input LoginUserInput {
  email: String!
  password: String!
}

input SignUpInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  username: String!
}

input UserCreateInput {
  type: Role!
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  username: String!
}

input TestCreateInput {
  status: Status!
  level: Level!
  name: String!
  description: String!
  questions: TestQuestionCreateNestedManyWithoutTestInput!
}

input TestQuestionCreateNestedManyWithoutTestInput {
  create: [TestQuestionCreateWithoutTestInput!]!
}

input TestQuestionCreateWithoutTestInput {
  question: QuestionCreateWithoutTestsInput!
}

input QuestionCreateWithoutTestsInput {
  text: String!
  correctAnswer: AnswerCreateNestedOneWithoutCorrectAnswerQuestionsInput!
  answers: QuestionAnswerCreateNestedManyWithoutQuestionInput!
}

input AnswerCreateNestedOneWithoutCorrectAnswerQuestionsInput {
  create: AnswerCreateInput!
}

input AnswerCreateInput {
  text: String!
}

input QuestionAnswerCreateNestedManyWithoutQuestionInput {
  create: [QuestionAnswerCreateWithoutQuestionInput!]
  connect: [QuestionAnswerWhereUniqueInput!]
}

input QuestionAnswerCreateWithoutQuestionInput {
  answer: AnswerCreateNestedOneWithoutOptionAnswerQuestionsInput!
}

input AnswerCreateNestedOneWithoutOptionAnswerQuestionsInput {
  create: AnswerCreateInput
  connect: AnswerWhereUniqueInput
}

input AnswerWhereUniqueInput {
  id: Float
  uuid: String!
}

input QuestionAnswerWhereUniqueInput {
  uuid: String!
}

input QuestionCreateInput {
  text: String!
  correctAnswer: AnswerCreateNestedOneWithoutCorrectAnswerQuestionsInput!
}